version: '3'

services:
  nginx:
    container_name: nginx
    build: nginx/
    ports:
      - $NGINX_HOST_PORT:80
    #volumes:
    #  - "/etc/timezone:/etc/timezone:ro"
    #  - "/etc/localtime:/etc/localtime:ro"
    # - static_volume:/home/app/web/project/static
    # - media_volume:/home/app/web/project/media
    networks:
      - frontend_network
    #depends_on:
    #  - frontend

  frontend:
    container_name: frontend
    build: frontend/
    environment:
      - FRONTEND_HOST_PORT #this command makes the port variable available inside the Dockerfile
      - FRONTEND_DOCKER_PORT
    #depends_on:
    #  - backend
    ports:
      - $FRONTEND_HOST_PORT:$FRONTEND_DOCKER_PORT #host port:4000; docker port:4000
    networks:
      - frontend_network

  backend:
    container_name: backend
    build: backend/
    env_file: .env
    #volumes:
    #  - "/etc/timezone:/etc/timezone:ro"
    #  - "/etc/localtime:/etc/localtime:ro"
    depends_on:
      - db
    links:
      - db:database  #db is reachable FROM BACKEND at the hostnames db and database
    ports:
      - $BACKEND_HOST_PORT:$BACKEND_DOCKER_PORT #host port:5000; docker port:5000
    networks:
      - frontend_network
      - backend_network

  db:
    container_name: postgresdb
    image: postgres:12-alpine
    restart: always
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB=$POSTGRES_DB_NAME
      - POSTGRES_HOST_PORT
      - POSTGRES_DB_PORT
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - /etc/localtime:/etc/localtime:ro
    ports:
      - $POSTGRES_HOST_PORT:$POSTGRES_DB_PORT #host port:54333; docker port:5432
    networks:
      - backend_network

volumes:
  postgres_data:

networks:
  frontend_network:
    driver: bridge
  backend_network:
    driver: bridge